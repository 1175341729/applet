package com.xinchao.entrytask.bus.dao;

import com.xinchao.entrytask.bus.dao.sqlbuiler.TaskSqlBuilder;
import com.xinchao.entrytask.bus.model.BriefingModel;
import com.xinchao.entrytask.bus.model.Task;
import com.xinchao.entrytask.bus.model.TaskQueryModel;
import com.xinchao.entrytask.bus.model.TaskSearchVo;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface TaskMapper {

    @InsertProvider(type = TaskSqlBuilder.class, method = "buildCreateTask")
    int insertTask(Task task);

    @Results(id = "taskResults", value = {
            @Result(property = "id", column = "id", id = true),
            @Result(property = "taskName", column = "task_name"),
            @Result(property = "taskAddress", column = "task_Address"),
            @Result(property = "propertyCompany", column = "property_Company"),
            @Result(property = "taskNumber", column = "task_number"),
            @Result(property = "dockingPerson", column = "docking_person"),
            @Result(property = "dockingPhone", column = "docking_phone"),
            @Result(property = "createTime", column = "create_time"),
            @Result(property = "completionTime", column = "completion_time"),
            @Result(property = "supplierId", column = "supplier_id"),
            @Result(property = "versionNum", column = "version_num")
    })
    @Select(value = "select * from task where id=#{id}")
    Task selectTaskById(Long id);

    /**
     * 根据城市获取任务类表
     * 根据微信获取任务列表
     * 根据城市和微信获取任务列表
     *
     * @param weixin
     * @param city
     * @return
     */
    @ResultMap(value = "taskResults")
    @SelectProvider(type = TaskSqlBuilder.class, method = "buildGetTaskByUserId")
    @ResultType(value = Task.class)
    List<Task> getTaskByUserId(@Param("weixin") String weixin, @Param("city") String city);

    @SelectProvider(type = TaskSqlBuilder.class, method = "buildGet")
    @ResultType(value = TaskSearchVo.class)
    List<TaskSearchVo> get(TaskQueryModel taskQueryModel);

    @SelectProvider(type = TaskSqlBuilder.class, method = "buildGetBriefing")
    BriefingModel getBriefing(String supplierId);

    /**
     * 按照供应商分组查询任务和接单统计数据
     *
     * @return 统计简报列表
     */
    @SelectProvider(type = TaskSqlBuilder.class, method = "buildGetBriefingGroupBySupplier")
    List<BriefingModel> getBriefingGroupBySupplier();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task
     *
     * @mbggenerated
     */
    int insert(Task record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task
     *
     * @mbggenerated
     */
    int insertSelective(Task record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task
     *
     * @mbggenerated
     */
    Task selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Task record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table task
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(Task record);

    List<Task> selectByAreaWithStatus2(@Param("cityCode") String cityCode, @Param("condition") String condition);
}